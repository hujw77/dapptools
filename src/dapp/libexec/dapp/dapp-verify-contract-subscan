#!/usr/bin/env bash
### dapp-verify-contract-subscan -- verify contract souce on etherscan
### Usage: dapp verify-contract-subscan <path>:<contractname> <address> [constructorArgs]

set -e

if [ "$DAPP_VERBOSE" ]; then set -x; fi

[[ $1 ]] || (dapp verify-contract-subscan --help >&2 && exit 1)
[[ $2 ]] || (dapp verify-contract-subscan --help >&2 && exit 1)

export ETHERSCAN_API_URL=https://crab.api.subscan.io/api/scan/evm/contract/verify
export ETHERSCAN_URL=https://crab.subscan.io/address

path=${1?contractname}
name=${path#*:}
address=${2?contractaddress}

# combined-json has a sourceList field
if [[ $(jq .sourceList "$DAPP_JSON") == null && -z "$DAPP_BUILD_LEGACY" ]]; then
    contract=$(<"$DAPP_JSON" jq -r ".contracts[\"${path/:*/}\"][\"$name\"]")
    meta=$(<"$DAPP_JSON" jshon -e contracts -e "${path/:*/}" -e "$name" -e metadata -u)
else
    contract=$(<"$DAPP_JSON" jq -r ".contracts[\"$path\"]")
    meta=$(jshon <<<"$contract" -e metadata -u)
fi
version=$(jshon <<<"$meta" -e compiler -e version -u)
evmVersion=$(jshon <<<"$meta" -e settings -e evmVersion -u)
file=$(jshon <<<"$meta" -e settings -e compilationTarget -k)
optimized=$(jshon <<<"$meta" -e settings -e optimizer -e enabled -u)
runs=$(jshon <<<"$meta" -e settings -e optimizer -e runs -u)

abi=$(jq '.["abi"]' -r <<< "$contract")
type=$(seth --abi-constructor <<< "$abi")
constructor=${type/constructor/${1#*:}}

if [[ $3 ]]; then
    constructorArguments=$(seth calldata "$constructor" "${@:3}")
    constructorArguments=${constructorArguments#0x}
    constructorArguments=${constructorArguments:8}
fi


# Etherscan requires leading 'v' which isn't in the artifacts
version="v${version}"

# Get the list of supported solc versions and compare
# Etherscan uses the js solc, which is not guaranteed to match the C distribution signature

version_list=$(curl -fsS "https://raw.githubusercontent.com/ethereum/solc-bin/gh-pages/bin/list.txt")
# There have been a couple of instances where the solc js release used by
#   Etherscan does not match the tag of the C distributions.
if [[ $version_list != *"$version"* ]]; then
  regex="(.+commit+.)"
  # Version incompatible with js release
  echo "Compiler version $version is not compatible with etherscan"
  if [[ $version =~ $regex ]]; then
    version_proto=${BASH_REMATCH[1]}
    version=$(echo "$version_list" | grep -o "${version_proto}\{8\}")
    echo "Attempting ${version}"
  fi
fi


if [[ "$optimized" = "true" ]]; then
  optimized=1
else
  optimized=0
fi

source=$(hevm flatten --source-file "$file" --json-file "$DAPP_JSON" --dapp-root ".")

source=$(cat <<.
// Verified by Darwinia Network

$source
.
)

source=$(echo -ne "$source" | base64 -w0)

# `POST https://crab.api.subscan.io/api/scan/evm/contract/compile`

# #### x-www-form-urlencoded

# | Name                       | Type   | Require |
# |----------------------------|--------|---------|
# | address                    | string | yes     |
# | contract_name              | string | yes     |
# | source_code                | string | yes     |
# | compiler_version           | string | yes     |
# | evm_version                | string | yes     |
# | external_libraries_address | object | no      |
# | optimize                   | bool   | no      |
# | optimization_runs          | int    | no      |

count=0
while [ $count -lt 5 ]; do
  sleep 10

  response=$(curl -fsS "$ETHERSCAN_API_URL" \
  --data-urlencode "address=$address" \
  --data-urlencode "contract_name=$name" \
  --data-urlencode "compiler_version=$version" \
  --data-urlencode "evm_version=$evmVersion" \
  --data-urlencode "optimize=$optimized" \
  --data-urlencode "optimization_runs=$runs" \
  --data-urlencode "source_code@"<(echo -ne "$source") -X POST)

  status=$(jshon <<<"$response" -e code -u)
  guid=$(jshon <<<"$response" -e generated_at -u)
  message=$(jshon <<<"$response" -e message -u)
  count=$((count + 1))

  [[ $status = 0 ]] && break;
done

[[ $status = 0 && $message = "Success" ]] && {
  echo >&2 "Contract source code already verified."
  echo >&2 "Go to $ETHERSCAN_URL/$2?tab=contract"
  exit 0
}

[[ $status = 400 ]] && {
  echo >&2 "There was an error verifying this contract."
  echo >&2 "Response: $message"
  echo >&2 "Details: $guid"
  exit 1
}




[[ $DAPP_ASYNC == yes ]] && exit

sleep 20
response=$(curl -fsS "$ETHERSCAN_API_URL" \
-d "module=contract&action=checkverifystatus&guid=$guid&apikey=$ETHERSCAN_API_KEY")

status=$(jshon <<<"$response" -e status -u)
result=$(jshon <<<"$response" -e result -u)

echo >&2 "$result"
[[ $status = 1 ]] && {
  echo >&2 "Go to $ETHERSCAN_URL/$2#code"
  exit 0
}

[[ $status = 0 ]] && {
  echo >&2 "Failure"
  echo >&2 "$result"
  exit 1
}
