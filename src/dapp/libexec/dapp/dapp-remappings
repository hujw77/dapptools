#!/usr/bin/env node
var PROGRAM_NAME = process.argv[1].replace(/.*\//, "")
var pkg_src = {}, pkg_hash = {}

findRemappings(".")

Object.keys(pkg_src).sort((a, b) => a.length - b.length).sort(
  (a, b) => {
    var depth = name => pkg_src[name].split("/").length
    return depth(a) - depth(b)
  }
).forEach(name => {
  console.log(`${name}/=${pkg_src[name]}/`)
})

function findRemappings(prefix) {
  ls(`${prefix}/${process.env.DAPP_LIB}`).forEach(name => {
    var lib = `${prefix}/${process.env.DAPP_LIB}`
    var path = `${lib}/${name}`
    var src = `${path}/${process.env.DAPP_SRC}`.replace(/^.\//, "")
    
    // If the path is a not a directory, return early.
    if (!isDir(path)) {
      return
    }

    // Shortcut when we're ignoring all the Git hash stuff.
    if (process.env.DAPP_IGNORE_HASHES) {
      pkg_src[name] = src
      findRemappings(path)
      return
    }

    if (ls(path).includes(".git") != true) {
      console.error(`${PROGRAM_NAME}: error: ${path} is not a Git repository`)
      console.error(`${PROGRAM_NAME}: error: try "dapp update" to initialize submodules`)
      process.exit(1)
    }

    var hash = run("git", ["-C", src, "rev-parse", "HEAD"])

    if (pkg_src[name]) {
      if (hash != pkg_hash[name]) {
        console.error(`${PROGRAM_NAME}: warning: mismatching packages:`)
        console.error(`${PROGRAM_NAME}: warning: (1) ${pkg_src[name]}`)
        console.error(`${PROGRAM_NAME}: warning: (2) ${src}`)
        console.error(`${PROGRAM_NAME}: warning: using ${pkg_src[name]}. You can override this using \`DAPP_REMAPPINGS\``)
      } else if (src.length < pkg_src[name].length) {
        pkg_src[name] = src
      }
    } else {
      pkg_src[name] = src
      pkg_hash[name] = hash
    }

    findRemappings(path)
  })
}

function ls(dir) {
  try {
    return require("fs").readdirSync(dir).sort()
  } catch (error) {
    return []
  }
}

function isDir(path) {
  try {
    return require("fs").lstatSync(path).isDirectory()
  } catch (error) {
    return false;
  }
}

function run(cmd, args) {
  return require("child_process").execFileSync(cmd, args, {
    encoding: "utf-8"
  })
}
